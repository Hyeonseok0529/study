// 2025_05_12 월요일

오늘은 쿠키, 세션에 의한 로그인 처리와 토큰 기반 인증방식에 대해 알아보려한다.

1. 쿠키, 세션
쿠키는 클라이언트(브라우저)에 저장되는 데이터 조각으로, 세션 ID 저장 및 자동 전송의 역할을 한다. 다만 쿠키는 클라이언트에 저장되기 때문에 개발자 도구에서 확인할 수 있어 누구나 내용을 확인하고 수정할 수 있는 위험성이 있다.
세션은 사용자 정보를 클라이언트에 저장하지 않고 서버에 저장한다. 로그인 상태나 사용자 정보를 저장하며 서버 내부에 저장되어있어 비교적 안전하다.

2. 로그인 처리의 흐름
로그인을 할 때 기본적인 처리는 다음과 같다.

1) 사용자 로그인 폼 제출 : 이메일or아이디/비밀번호 입력
2) 서버에서 로그인 정보 확인 : DB에서 사용자 정보 검증
3) 로그인 성공 시, 서버에서 세션 생성 : 사용자 정보를 바탕으로 세션 객체 생성
4) 세션 ID 생성 후 클라이언트에게 전달 : 세션 ID -> Set-Cookie 헤더 -> 쿠키
5) 쿠키를 받은 클라리언트는 이후 모든 요청에 쿠키 자동 포함
6) 서버는 세션 ID를 기준으로 로그인 상태 유지 : 요청마다 세션 ID 확인

3. 쿠키 + 세션을 같이 쓰는 이유
세션은 사용자 정보를 클라이언트(브라우저)에 저장하지 않고 서버에만 저장되어 보안이 높다. 세션 ID가 전달되는 쿠키는 자동으로 전송되기 때문에 인증 토큰처럼 사용할 수 있다. 그래서 세션 ID만 쿠키에 저장하고 민감한 정보는 저장하지 않아 안전하게 로그인 유지가 가능하기 때문에 쿠키와 세션을 같이 사용한다.

4. 토큰 기반 인증방식
토큰 기반 인증 방식은 사용자 인증을 위해 서버에서 발급한 토큰을 사용하는 방식이다. 쿠키나 세션을 사용하지 않고, 토큰을 통해 인증을 처리한다. 이 방식은 RESTful API와 같은 무상태 어플리케이션에서 많이 사용된다.

5. 작동 방식
1) 로그인 시 서버는 사용자의 정보를 확인하고 JWT(Json Web Token)와 같은 토큰을 생성하여 클라이언트(브라우저)에게 전달한다. 여기서 토큰은 사용자가 서버에서 인증을 통과했다는 것을 증명하는 암호화된 정보를 뜻한다.

2) 클라이언트는 이 토큰을 로컬 스토리지, 세션 스토리지, 혹은 쿠키에 저장해두고 이후 서버에 요청을 보낼 때마다 이 토큰을 요청 헤더에 자동으로 첨부한다.

3) 서버는 클라이언트가 보낸 토큰을 검증하여 유효한 토큰이면 요청을 처리하고, 그렇지 않으면 401Unauthorized 응답을 반환한다.

6. 토큰 기반 인증의 특징
1) 세션이 서버에 저장되지 않는다.
사용자의 인증 정보를 서버에 저장하지 않고, 클라이언트가 보유한 토큰을 통해 인증을 처리한다. 서버는 토큰만 확인하면 되는 방식이다.

2) 스케일링 용이
서버에서 세션을 저장하지 않기 때문에 서버간의 로드 밸런싱이 용이하고, 분산 시스템에서도 유연하게 사용할 수 있다.

3) 무상태(stateless)
서버는 상태를 저장하지 않으므로 각 요청이 독립적이다. 서버가 재시작되거나, 여러 서버에서 처리할 때 문제가 없다.

7. JWT(Json Web Token)
JWT는 토큰 기반 인증에서 사용하는 대표적인 방식이다. JWT는 헤더,페이로드, 서명으로 구분된다.

1) 헤더
토큰의 유형과 암호화 알고리즘 정보를 담고 있다.

{
  "alg": "HS256",
  "typ": "JWT"
}
2) 페이로드
사용자의 정보, 토큰의 유효기간 등을 포함한 클레임이 들어가있다.

{
  "userId": 123,
  "username": "johndoe",
  "exp": 1627993681
}
3) 서명
헤더와 페이로드를 합쳐서 비밀 키로 서명한다. 이 서명을 통해 토큰이 변조되지 않았는지 검증할 수 있다.

Signature = HMACSHA256(
    base64UrlEncode(header) + "." +
    base64UrlEncode(payload),
    secret)
8. 쿠키, 세션 로그인 처리 / 토큰 기반 인증방식
1) 전통적인 웹사이트 : 쿠키/세션 기반 인증
2) SPA, 모바일 앱, API 서버 : JWT
3) 높은 확장성, 무상태 서버 구조 : JWT
4) 정밀한 세션 제어와 로그아웃 기능이 중요할 때 : 세션 기반 인증

인증 정보 관리를 서버에서 할 지, 클라이언트가 다양한 플랫폼인지, 서버 간 부하 분산이 필요한지, 민감한 정보 처리/보안이 중요한지 등의 질문들을 더 생각해볼 수 있겠다.