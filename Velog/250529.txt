// 2025_05_29 목요일

SCSS와 SASS에 대해서 복습하는 시간을 가져보자.

CSS의 한계
SCSS와 SASS는 CSS 작성을 매우 편리하게 해준다. 그렇다면 기존에 쓰는 CSS의 한계는 무엇일까?

1) 변수 X : 색상, 폰트 등의 스타일을 반복해서 적어야 한다.
2) 계층 구조 표현의 불편함 : 중첩이 되지 않기 때문에 구조가 보기 어렵게 작성된다.
3) 재사용의 어려움 : 반복되는 스타일을 묶어서 재사용하기 어렵고 유지보수 하기가 힘들다.

그래서 SASS(싸쓰)가 등장하게 되었다.

SASS
Syntactically Awesome Stylesheets, CSS를 더 효율적으로, 프로그래밍처럼 쓸 수 있게 만든 전처리기이다. 파일을 작성할 때는 .scss나 .sass를 사용하지만, 컴파일을 하면 CSS파일로 변환되어서 브라우저에서는 결국 변환된 CSS만 사용하게 된다.

차이점
SASS와 SCSS는 문법차이가 있다. SASS는 들여쓰기 기반으로 기호"{}"와 ";"가 없다. 반면에 SCSS는 CSS처럼 생겼고, SASS에 없는 두 가지 기호가 있다. 개인마다 차이가 있지만 CSS에 더 친숙해져 있는 경우 CSS에서 바로 확장이 가능한 SCSS문법이 더 익숙하다.

// SASS 예시

$primary-color: blue

.button
 background-color: $primary-color
 color: white


// SCSS 예시
$primary-color: blue;

.button {
 background-color: $primary-color;
 color: white;
}
SCSS라고 쓰고 싸스라고 부른다.
수업을 들으면서 조금 헷갈렸던 부분이기도 하다. 분명히 파일명은 .scss인데, 선생님께서는 싸쓰라고 항상 표현하셨다. 왜 그렇게 부를까?

기술 전체 이름이 SASS이기 때문에 통칭해서 싸스라고 부르게 되었다. 또한 많은 개발자들이 SCSS문법을 많이 쓰고 있어서 보통 "SASS 쓴다" 라고 이야기하는 것은 "SCSS 문법으로 SASS 사용중이다"라는 의미로 받아들일 수 있다.

정리하면 SASS는 CSS 전처리기 이름(전체 기술의 이름)이며 SASS문법과 SCSS문법이 서로 형제 같은 관계라고 생각할 수 있겠다.

SCSS 문법
1) 변수(Variables)
// 중복되는 값을 정의하고 계속해서 사용할 수 있다.
// 변수를 변경하면 전체에 반영된다.

$main-color: #3498db;
$padding: 20px;

.button {
  background-color: $main-color;
  padding: $padding;
}

2) 중첩(Nesting)
// 스타일을 HTML 구조처럼 작성할 수 있다.
// 구조를 한눈에 볼 수 있다는 특징이 있다.

.nav {
   ul {
     li {
       a {
         color:blue;
       }
     }
   }
 }

3) 믹스인(Mixin)
// 자주 쓰는 스타일을 함수처럼 만들어서 재사용할 수 있다.

@mixin center {
  display: flex;
  justify-content: center;
  align-items: center;
}

.box {
  @include center;
  height: 100px;
}

// 이렇게 믹스인을 쓰게되면 @include center로 호출만 하면 된다.

4) 상속(Extend)
// 기존 클래스를 그대로 복사받고 덧붙일 수 있다.
// 비슷한 스타일을 갖는 요소끼리 코드를 줄일 수 있다.

%base-button {
  padding: 10px;
  border-radius: 5px;
}

.btn-primary {
  @extend %base-button;
  background: blue;
}

5) 연산
// 단위까지 계산해주기 때문에 수치 조정이 쉽다.

.container {
 width: 100% - 80px;
 }