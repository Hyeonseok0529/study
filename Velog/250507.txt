// 2025_05_07 수요일

오늘은 브라우저 렌더링 과정의 전반을 다시 한 번 살펴보려고 한다.

브라우저 렌더링
브라우저 렌더링이란, 브라우저가 HTML/CSS/JavaScript 등으로 구성된 웹 페이지 소스코드를 전달받아서 사용자에게 보이는 형태로 화면에 그려주는 일련의 처리 과정을 뜻한다.

1. HTML 파싱 -> DOM 생성
파싱은 문자열(텍스트)을 분석해서 컴퓨터가 이해할 수 있는 구조로 바꾸는 것이다. 브라우저 렌더링에서는 HTML 파싱이 제일 첫 단계로 진행되며 브라우저가 서버로부터 받은 HTML 텍스트를 읽고 태그별로 해석해가면서 DOM(Document Object Model) 트리구조로 만들게 된다. 여기서 트리구조는 노드들이 계층적으로 연결된 구조를 말하며, 거꾸로 된 나무모양처럼 구성된다.
이 과정의 예시로

<div>Hello</div>
위와 같은 코드가 있다고 가정하면 , div라는 노드와 "Hello"라는 텍스트 노드가 생긴다.

2. CSS 파싱 -> CSSOM 생성
HTML안에 있는 style,link태그로 연결되어있는 CSS도 파싱을 진행한다. 이 과정에서 CSS 규칙들을 해석하여 CSSOM(CSS Object Model)이라는 또 다른 트리 구조를 만들게 된다.

3. 렌더 트리(Render Tree) 생성
1,2번 과정에서 생겨난 DOM과 CSSOM을 합쳐진 렌더 트리를 만든다. 즉, 렌더트리는 화면에 실제로 보여질 요소들만 모아놓은 트리 구조이다. 만약 display:none 되어있는 HTML 요소가 있다면 렌더 트리에서 제외된다.

4. 레이아웃 계산(Layout, Reflow)
렌더 트리를 기반으로 각 요소의 위치(position), 크기(size)를 계산한다. 이를 리플로우(Reflow) 라고 부르며, 리플로우가 진행될 때 브라우저의 레이아웃 엔진이 작동한다.

<div style="width: 100px; padding: 20px;"> 안녕 </div>
간단한 위의 예시로 보았을 때 레이아웃 엔진은

가 실제로 얼마만큼의 크기를 차지하고, 화면의 어디에 있어야 하는지를 계산해서 결정한다.
5. 페인팅(Paint)
레이아웃이 완료되면 각 노드에 색상, 테두리, 텍스트, 이미지 등을 출력한다. 이 과정이 바로 페인팅이다.

6. 컴포지팅(Composite)
페인팅된 요소들을 레이어(layer)단위로 합성한다. GPU와 협력해서 화면에 최종적으로 표시하는 과정이다.

정리
브라우저 렌더링 과정은 먼저 HTML을 파싱해서 DOM 트리를 생성하고, CSS를 파싱해서 CSSOM 트리를 생성하고, 그 다음이 두 트리를 합쳐 렌더 트리를 생성한다. 이후 렌더 트리를 바탕으로 레이아웃 엔진이 작동하고, 페인팅과 컴포지팅 단계를 거치게 된다.
브라우저 렌더링은 웹 어플리케이션의 성능을 최적화하고, 사용자의 경험을 개선하기 위한 핵심적인 요소들을 다루고 있다. 브라우저 렌더링의 개념이 잘 잡혀있다면 더 빠르고 부드러운 웹사이트를 만들 수 있고, 문제가 발생했을 때 효과적으로 해결할 수 있다.